# Generated by Django 5.2.4 on 2025-07-16 20:04

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("modeler", "0008_auto_20250715_1911"),
    ]

    operations = [
        migrations.AddField(
            model_name="datamodel",
            name="description",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="datamodel",
            name="tags",
            field=models.JSONField(blank=True, default=list),
        ),
        migrations.AddField(
            model_name="datamodel",
            name="updated_at",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name="datamodel",
            name="version",
            field=models.CharField(default="1.0", max_length=20),
        ),
        migrations.AddField(
            model_name="edge",
            name="created_at",
            field=models.DateTimeField(
                auto_now_add=True, default=django.utils.timezone.now
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="edge",
            name="description",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="edge",
            name="name",
            field=models.CharField(blank=True, max_length=100),
        ),
        migrations.AddField(
            model_name="edge",
            name="updated_at",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name="node",
            name="created_at",
            field=models.DateTimeField(
                auto_now_add=True, default=django.utils.timezone.now
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="node",
            name="description",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="node",
            name="name",
            field=models.CharField(blank=True, max_length=100),
        ),
        migrations.AddField(
            model_name="node",
            name="table_name",
            field=models.CharField(blank=True, max_length=100),
        ),
        migrations.AddField(
            model_name="node",
            name="updated_at",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AlterField(
            model_name="node",
            name="type",
            field=models.CharField(
                choices=[
                    ("HUB", "Hub"),
                    ("LNK", "Link"),
                    ("SAT", "Satellite"),
                    ("REF", "Reference"),
                    ("PIT", "Point in Time"),
                    ("BRIDGE", "Bridge"),
                ],
                max_length=6,
            ),
        ),
        migrations.CreateModel(
            name="Hub",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("table_name", models.CharField(blank=True, max_length=100)),
                (
                    "business_keys",
                    models.JSONField(
                        default=list, help_text="List of business key columns"
                    ),
                ),
                (
                    "hashkey_name",
                    models.CharField(
                        default="",
                        help_text="Name of the hub hashkey column",
                        max_length=100,
                    ),
                ),
                (
                    "record_sources",
                    models.JSONField(
                        default=list, help_text="Source systems providing data"
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("tags", models.JSONField(blank=True, default=list)),
                ("position_x", models.FloatField(default=0)),
                ("position_y", models.FloatField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "model",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="hubs",
                        to="modeler.datamodel",
                    ),
                ),
                (
                    "node",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="modeler.node",
                    ),
                ),
            ],
            options={
                "unique_together": {("model", "name")},
            },
        ),
        migrations.CreateModel(
            name="Link",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("table_name", models.CharField(blank=True, max_length=100)),
                (
                    "hashkey_name",
                    models.CharField(
                        default="",
                        help_text="Name of the link hashkey column",
                        max_length=100,
                    ),
                ),
                ("dependent_child_key", models.CharField(blank=True, max_length=100)),
                (
                    "record_sources",
                    models.JSONField(
                        default=list, help_text="Source systems providing data"
                    ),
                ),
                (
                    "is_transactional",
                    models.BooleanField(
                        default=False, help_text="Whether this is a transactional link"
                    ),
                ),
                (
                    "attributes",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Attributes for transactional links",
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("tags", models.JSONField(blank=True, default=list)),
                ("position_x", models.FloatField(default=0)),
                ("position_y", models.FloatField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "model",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="links",
                        to="modeler.datamodel",
                    ),
                ),
                (
                    "node",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="modeler.node",
                    ),
                ),
            ],
            options={
                "unique_together": {("model", "name")},
            },
        ),
        migrations.CreateModel(
            name="Bridge",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("table_name", models.CharField(blank=True, max_length=100)),
                (
                    "bridge_entities",
                    models.JSONField(
                        default=list, help_text="Entities connected by this bridge"
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("tags", models.JSONField(blank=True, default=list)),
                ("position_x", models.FloatField(default=0)),
                ("position_y", models.FloatField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "model",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bridges",
                        to="modeler.datamodel",
                    ),
                ),
                (
                    "node",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="modeler.node",
                    ),
                ),
            ],
            options={
                "unique_together": {("model", "name")},
            },
        ),
        migrations.CreateModel(
            name="PointInTime",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("table_name", models.CharField(blank=True, max_length=100)),
                (
                    "snapshot_date_column",
                    models.CharField(default="snapshot_date", max_length=100),
                ),
                (
                    "tracked_satellites",
                    models.JSONField(
                        default=list, help_text="List of satellites being tracked"
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("tags", models.JSONField(blank=True, default=list)),
                ("position_x", models.FloatField(default=0)),
                ("position_y", models.FloatField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "model",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="point_in_times",
                        to="modeler.datamodel",
                    ),
                ),
                (
                    "node",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="modeler.node",
                    ),
                ),
                (
                    "tracked_entity",
                    models.ForeignKey(
                        help_text="Hub or Link being tracked",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="modeler.hub",
                    ),
                ),
            ],
            options={
                "unique_together": {("model", "name")},
            },
        ),
        migrations.CreateModel(
            name="Reference",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("table_name", models.CharField(blank=True, max_length=100)),
                (
                    "reference_type",
                    models.CharField(
                        choices=[
                            ("table", "Reference Table"),
                            ("hub", "Reference Hub"),
                            ("satellite", "Reference Satellite"),
                        ],
                        default="table",
                        max_length=20,
                    ),
                ),
                ("record_source", models.CharField(blank=True, max_length=100)),
                (
                    "reference_keys",
                    models.JSONField(default=list, help_text="Reference key columns"),
                ),
                (
                    "attributes",
                    models.JSONField(
                        default=list, help_text="Reference data attributes"
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("tags", models.JSONField(blank=True, default=list)),
                ("position_x", models.FloatField(default=0)),
                ("position_y", models.FloatField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "model",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="references",
                        to="modeler.datamodel",
                    ),
                ),
                (
                    "node",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="modeler.node",
                    ),
                ),
            ],
            options={
                "unique_together": {("model", "name")},
            },
        ),
        migrations.CreateModel(
            name="Satellite",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("table_name", models.CharField(blank=True, max_length=100)),
                (
                    "satellite_type",
                    models.CharField(
                        choices=[
                            ("standard", "Standard Satellite"),
                            ("multi-active", "Multi-Active Satellite"),
                            ("effectivity", "Effectivity Satellite"),
                            ("record-tracking", "Record-Tracking Satellite"),
                            ("non-historized", "Non-Historized Satellite"),
                        ],
                        default="standard",
                        max_length=20,
                    ),
                ),
                (
                    "hashdiff_name",
                    models.CharField(
                        default="",
                        help_text="Name of the hashdiff column",
                        max_length=100,
                    ),
                ),
                ("record_source", models.CharField(blank=True, max_length=100)),
                (
                    "attributes",
                    models.JSONField(
                        default=list, help_text="List of attribute columns"
                    ),
                ),
                ("contains_pii", models.BooleanField(default=False)),
                ("multi_active_key", models.CharField(blank=True, max_length=100)),
                ("effective_from_column", models.CharField(blank=True, max_length=100)),
                ("effective_to_column", models.CharField(blank=True, max_length=100)),
                ("is_deleted_column", models.CharField(blank=True, max_length=100)),
                ("description", models.TextField(blank=True)),
                ("tags", models.JSONField(blank=True, default=list)),
                ("position_x", models.FloatField(default=0)),
                ("position_y", models.FloatField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "model",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="satellites",
                        to="modeler.datamodel",
                    ),
                ),
                (
                    "node",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="modeler.node",
                    ),
                ),
                (
                    "parent_hub",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="modeler.hub",
                    ),
                ),
                (
                    "parent_link",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="modeler.link",
                    ),
                ),
            ],
            options={
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(
                            ("parent_hub__isnull", False),
                            ("parent_link__isnull", False),
                            _connector="OR",
                        ),
                        name="satellite_must_have_parent",
                    )
                ],
                "unique_together": {("model", "name")},
            },
        ),
    ]
